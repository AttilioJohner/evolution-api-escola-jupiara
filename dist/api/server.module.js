"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evoaiController = exports.n8nController = exports.flowiseController = exports.evolutionBotController = exports.difyController = exports.typebotController = exports.openaiController = exports.baileysController = exports.metaController = exports.evolutionController = exports.channelController = exports.chatbotController = exports.eventManager = exports.labelController = exports.groupController = exports.businessController = exports.chatController = exports.callController = exports.sendMessageController = exports.instanceController = exports.settingsController = exports.chatwootController = exports.proxyController = exports.templateController = exports.s3Controller = exports.waMonitor = exports.prismaRepository = exports.cache = void 0;
const cacheengine_1 = require("@cache/cacheengine");
const env_config_1 = require("@config/env.config");
const event_config_1 = require("@config/event.config");
const logger_config_1 = require("@config/logger.config");
const business_controller_1 = require("./controllers/business.controller");
const call_controller_1 = require("./controllers/call.controller");
const chat_controller_1 = require("./controllers/chat.controller");
const group_controller_1 = require("./controllers/group.controller");
const instance_controller_1 = require("./controllers/instance.controller");
const label_controller_1 = require("./controllers/label.controller");
const proxy_controller_1 = require("./controllers/proxy.controller");
const sendMessage_controller_1 = require("./controllers/sendMessage.controller");
const settings_controller_1 = require("./controllers/settings.controller");
const template_controller_1 = require("./controllers/template.controller");
const channel_controller_1 = require("./integrations/channel/channel.controller");
const evolution_controller_1 = require("./integrations/channel/evolution/evolution.controller");
const meta_controller_1 = require("./integrations/channel/meta/meta.controller");
const baileys_controller_1 = require("./integrations/channel/whatsapp/baileys.controller");
const chatbot_controller_1 = require("./integrations/chatbot/chatbot.controller");
const chatwoot_controller_1 = require("./integrations/chatbot/chatwoot/controllers/chatwoot.controller");
const chatwoot_service_1 = require("./integrations/chatbot/chatwoot/services/chatwoot.service");
const dify_controller_1 = require("./integrations/chatbot/dify/controllers/dify.controller");
const dify_service_1 = require("./integrations/chatbot/dify/services/dify.service");
const evoai_controller_1 = require("./integrations/chatbot/evoai/controllers/evoai.controller");
const evoai_service_1 = require("./integrations/chatbot/evoai/services/evoai.service");
const evolutionBot_controller_1 = require("./integrations/chatbot/evolutionBot/controllers/evolutionBot.controller");
const evolutionBot_service_1 = require("./integrations/chatbot/evolutionBot/services/evolutionBot.service");
const flowise_controller_1 = require("./integrations/chatbot/flowise/controllers/flowise.controller");
const flowise_service_1 = require("./integrations/chatbot/flowise/services/flowise.service");
const n8n_controller_1 = require("./integrations/chatbot/n8n/controllers/n8n.controller");
const n8n_service_1 = require("./integrations/chatbot/n8n/services/n8n.service");
const openai_controller_1 = require("./integrations/chatbot/openai/controllers/openai.controller");
const openai_service_1 = require("./integrations/chatbot/openai/services/openai.service");
const typebot_controller_1 = require("./integrations/chatbot/typebot/controllers/typebot.controller");
const typebot_service_1 = require("./integrations/chatbot/typebot/services/typebot.service");
const event_manager_1 = require("./integrations/event/event.manager");
const s3_controller_1 = require("./integrations/storage/s3/controllers/s3.controller");
const s3_service_1 = require("./integrations/storage/s3/services/s3.service");
const sessions_1 = require("./provider/sessions");
const repository_service_1 = require("./repository/repository.service");
const cache_service_1 = require("./services/cache.service");
const monitor_service_1 = require("./services/monitor.service");
const proxy_service_1 = require("./services/proxy.service");
const settings_service_1 = require("./services/settings.service");
const template_service_1 = require("./services/template.service");
const logger = new logger_config_1.Logger('WA MODULE');
let chatwootCache = null;
if (env_config_1.configService.get('CHATWOOT').ENABLED) {
    chatwootCache = new cache_service_1.CacheService(new cacheengine_1.CacheEngine(env_config_1.configService, chatwoot_service_1.ChatwootService.name).getEngine());
}
exports.cache = new cache_service_1.CacheService(new cacheengine_1.CacheEngine(env_config_1.configService, 'instance').getEngine());
const baileysCache = new cache_service_1.CacheService(new cacheengine_1.CacheEngine(env_config_1.configService, 'baileys').getEngine());
let providerFiles = null;
if (env_config_1.configService.get('PROVIDER').ENABLED) {
    providerFiles = new sessions_1.ProviderFiles(env_config_1.configService);
}
exports.prismaRepository = new repository_service_1.PrismaRepository(env_config_1.configService);
exports.waMonitor = new monitor_service_1.WAMonitoringService(event_config_1.eventEmitter, env_config_1.configService, exports.prismaRepository, providerFiles, exports.cache, chatwootCache, baileysCache);
const s3Service = new s3_service_1.S3Service(exports.prismaRepository);
exports.s3Controller = new s3_controller_1.S3Controller(s3Service);
const templateService = new template_service_1.TemplateService(exports.waMonitor, exports.prismaRepository, env_config_1.configService);
exports.templateController = new template_controller_1.TemplateController(templateService);
const proxyService = new proxy_service_1.ProxyService(exports.waMonitor);
exports.proxyController = new proxy_controller_1.ProxyController(proxyService, exports.waMonitor);
const chatwootService = new chatwoot_service_1.ChatwootService(exports.waMonitor, env_config_1.configService, exports.prismaRepository, chatwootCache);
exports.chatwootController = new chatwoot_controller_1.ChatwootController(chatwootService, env_config_1.configService, exports.prismaRepository);
const settingsService = new settings_service_1.SettingsService(exports.waMonitor);
exports.settingsController = new settings_controller_1.SettingsController(settingsService);
exports.instanceController = new instance_controller_1.InstanceController(exports.waMonitor, env_config_1.configService, exports.prismaRepository, event_config_1.eventEmitter, chatwootService, settingsService, exports.proxyController, exports.cache, chatwootCache, baileysCache, providerFiles);
exports.sendMessageController = new sendMessage_controller_1.SendMessageController(exports.waMonitor);
exports.callController = new call_controller_1.CallController(exports.waMonitor);
exports.chatController = new chat_controller_1.ChatController(exports.waMonitor);
exports.businessController = new business_controller_1.BusinessController(exports.waMonitor);
exports.groupController = new group_controller_1.GroupController(exports.waMonitor);
exports.labelController = new label_controller_1.LabelController(exports.waMonitor);
exports.eventManager = new event_manager_1.EventManager(exports.prismaRepository, exports.waMonitor);
exports.chatbotController = new chatbot_controller_1.ChatbotController(exports.prismaRepository, exports.waMonitor);
exports.channelController = new channel_controller_1.ChannelController(exports.prismaRepository, exports.waMonitor);
exports.evolutionController = new evolution_controller_1.EvolutionController(exports.prismaRepository, exports.waMonitor);
exports.metaController = new meta_controller_1.MetaController(exports.prismaRepository, exports.waMonitor);
exports.baileysController = new baileys_controller_1.BaileysController(exports.waMonitor);
const openaiService = new openai_service_1.OpenaiService(exports.waMonitor, exports.prismaRepository, env_config_1.configService);
exports.openaiController = new openai_controller_1.OpenaiController(openaiService, exports.prismaRepository, exports.waMonitor);
const typebotService = new typebot_service_1.TypebotService(exports.waMonitor, env_config_1.configService, exports.prismaRepository, openaiService);
exports.typebotController = new typebot_controller_1.TypebotController(typebotService, exports.prismaRepository, exports.waMonitor);
const difyService = new dify_service_1.DifyService(exports.waMonitor, exports.prismaRepository, env_config_1.configService, openaiService);
exports.difyController = new dify_controller_1.DifyController(difyService, exports.prismaRepository, exports.waMonitor);
const evolutionBotService = new evolutionBot_service_1.EvolutionBotService(exports.waMonitor, exports.prismaRepository, env_config_1.configService, openaiService);
exports.evolutionBotController = new evolutionBot_controller_1.EvolutionBotController(evolutionBotService, exports.prismaRepository, exports.waMonitor);
const flowiseService = new flowise_service_1.FlowiseService(exports.waMonitor, exports.prismaRepository, env_config_1.configService, openaiService);
exports.flowiseController = new flowise_controller_1.FlowiseController(flowiseService, exports.prismaRepository, exports.waMonitor);
const n8nService = new n8n_service_1.N8nService(exports.waMonitor, exports.prismaRepository, env_config_1.configService, openaiService);
exports.n8nController = new n8n_controller_1.N8nController(n8nService, exports.prismaRepository, exports.waMonitor);
const evoaiService = new evoai_service_1.EvoaiService(exports.waMonitor, exports.prismaRepository, env_config_1.configService, openaiService);
exports.evoaiController = new evoai_controller_1.EvoaiController(evoaiService, exports.prismaRepository, exports.waMonitor);
logger.info('Module - ON');
