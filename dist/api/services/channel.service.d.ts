import { InstanceDto } from '@api/dto/instance.dto';
import { ProxyDto } from '@api/dto/proxy.dto';
import { SettingsDto } from '@api/dto/settings.dto';
import { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';
import { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';
import { DifyService } from '@api/integrations/chatbot/dify/services/dify.service';
import { OpenaiService } from '@api/integrations/chatbot/openai/services/openai.service';
import { TypebotService } from '@api/integrations/chatbot/typebot/services/typebot.service';
import { PrismaRepository, Query } from '@api/repository/repository.service';
import { Events, wa } from '@api/types/wa.types';
import { ConfigService } from '@config/env.config';
import { Logger } from '@config/logger.config';
import { Contact, Message, Prisma } from '@prisma/client';
import { WASocket } from 'baileys';
import EventEmitter2 from 'eventemitter2';
import { CacheService } from './cache.service';
export declare class ChannelStartupService {
    readonly configService: ConfigService;
    readonly eventEmitter: EventEmitter2;
    readonly prismaRepository: PrismaRepository;
    readonly chatwootCache: CacheService;
    constructor(configService: ConfigService, eventEmitter: EventEmitter2, prismaRepository: PrismaRepository, chatwootCache: CacheService);
    readonly logger: Logger;
    client: WASocket;
    readonly instance: wa.Instance;
    readonly localChatwoot: wa.LocalChatwoot;
    readonly localProxy: wa.LocalProxy;
    readonly localSettings: wa.LocalSettings;
    readonly localWebhook: wa.LocalWebHook;
    chatwootService: ChatwootService;
    openaiService: OpenaiService;
    typebotService: TypebotService;
    difyService: DifyService;
    setInstance(instance: InstanceDto): void;
    set instanceName(name: string);
    get instanceName(): string;
    set instanceId(id: string);
    get instanceId(): string;
    set integration(integration: string);
    get integration(): string;
    set number(number: string);
    get number(): string;
    set token(token: string);
    get token(): string;
    get wuid(): string;
    loadWebhook(): Promise<void>;
    loadSettings(): Promise<void>;
    setSettings(data: SettingsDto): Promise<void>;
    findSettings(): Promise<{
        rejectCall: boolean;
        msgCall: string;
        groupsIgnore: boolean;
        alwaysOnline: boolean;
        readMessages: boolean;
        readStatus: boolean;
        syncFullHistory: boolean;
        wavoipToken: string;
    }>;
    loadChatwoot(): Promise<void>;
    setChatwoot(data: ChatwootDto): Promise<void>;
    findChatwoot(): Promise<ChatwootDto | null>;
    clearCacheChatwoot(): void;
    loadProxy(): Promise<void>;
    setProxy(data: ProxyDto): Promise<void>;
    findProxy(): Promise<{
        id: string;
        createdAt: Date | null;
        instanceId: string;
        enabled: boolean;
        updatedAt: Date;
        host: string;
        port: string;
        protocol: string;
        username: string;
        password: string;
    }>;
    sendDataWebhook<T = any>(event: Events, data: T, local?: boolean, integration?: string[]): Promise<void>;
    formatMXOrARNumber(jid: string): string;
    formatBRNumber(jid: string): string;
    fetchContacts(query: Query<Contact>): Promise<{
        isGroup: boolean;
        isSaved: boolean;
        type: string;
        id: string;
        createdAt: Date | null;
        instanceId: string;
        pushName: string | null;
        updatedAt: Date | null;
        profilePicUrl: string | null;
        remoteJid: string;
    }[]>;
    cleanMessageData(message: any): any;
    fetchMessages(query: Query<Message>): Promise<{
        messages: {
            total: number;
            pages: number;
            currentPage: number;
            records: {
                id: string;
                instanceId: string;
                message: Prisma.JsonValue;
                key: Prisma.JsonValue;
                pushName: string;
                messageType: string;
                contextInfo: Prisma.JsonValue;
                source: import(".prisma/client").$Enums.DeviceMessage;
                messageTimestamp: number;
                MessageUpdate: {
                    status: string;
                }[];
            }[];
        };
    }>;
    fetchStatusMessage(query: any): Promise<{
        id: string;
        messageId: string;
        instanceId: string;
        participant: string | null;
        status: string;
        remoteJid: string;
        pollUpdates: Prisma.JsonValue | null;
        fromMe: boolean;
        keyId: string;
    }[]>;
    findChatByRemoteJid(remoteJid: string): Promise<{
        id: string;
        createdAt: Date | null;
        instanceId: string;
        name: string | null;
        updatedAt: Date | null;
        remoteJid: string;
        labels: Prisma.JsonValue | null;
        unreadMessages: number;
    }>;
    fetchChats(query: any): Promise<{
        id: any;
        remoteJid: any;
        pushName: any;
        profilePicUrl: any;
        updatedAt: any;
        windowStart: any;
        windowExpires: any;
        windowActive: any;
        lastMessage: any;
        unreadCount: any;
        isSaved: boolean;
    }[]>;
    hasValidMediaContent(message: any): boolean;
}
