import { NatsController } from '@api/integrations/event/nats/nats.controller';
import { PusherController } from '@api/integrations/event/pusher/pusher.controller';
import { RabbitmqController } from '@api/integrations/event/rabbitmq/rabbitmq.controller';
import { SqsController } from '@api/integrations/event/sqs/sqs.controller';
import { WebhookController } from '@api/integrations/event/webhook/webhook.controller';
import { WebsocketController } from '@api/integrations/event/websocket/websocket.controller';
import { PrismaRepository } from '@api/repository/repository.service';
import { WAMonitoringService } from '@api/services/monitor.service';
import { Server } from 'http';
export declare class EventManager {
    private prismaRepository;
    private waMonitor;
    private websocketController;
    private webhookController;
    private rabbitmqController;
    private natsController;
    private sqsController;
    private pusherController;
    constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService);
    set prisma(prisma: PrismaRepository);
    get prisma(): PrismaRepository;
    set monitor(waMonitor: WAMonitoringService);
    get monitor(): WAMonitoringService;
    set websocket(websocket: WebsocketController);
    get websocket(): WebsocketController;
    set webhook(webhook: WebhookController);
    get webhook(): WebhookController;
    set rabbitmq(rabbitmq: RabbitmqController);
    get rabbitmq(): RabbitmqController;
    set nats(nats: NatsController);
    get nats(): NatsController;
    set sqs(sqs: SqsController);
    get sqs(): SqsController;
    set pusher(pusher: PusherController);
    get pusher(): PusherController;
    init(httpServer: Server): void;
    emit(eventData: {
        instanceName: string;
        origin: string;
        event: string;
        data: Object;
        serverUrl: string;
        dateTime: string;
        sender: string;
        apiKey?: string;
        local?: boolean;
        integration?: string[];
    }): Promise<void>;
    setInstance(instanceName: string, data: any): Promise<any>;
}
