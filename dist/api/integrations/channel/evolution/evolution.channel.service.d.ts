import { InstanceDto } from '@api/dto/instance.dto';
import { MediaMessage, Options, SendAudioDto, SendButtonsDto, SendMediaDto, SendTextDto } from '@api/dto/sendMessage.dto';
import { PrismaRepository } from '@api/repository/repository.service';
import { CacheService } from '@api/services/cache.service';
import { ChannelStartupService } from '@api/services/channel.service';
import { wa } from '@api/types/wa.types';
import { ConfigService } from '@config/env.config';
import EventEmitter2 from 'eventemitter2';
export declare class EvolutionStartupService extends ChannelStartupService {
    readonly configService: ConfigService;
    readonly eventEmitter: EventEmitter2;
    readonly prismaRepository: PrismaRepository;
    readonly cache: CacheService;
    readonly chatwootCache: CacheService;
    constructor(configService: ConfigService, eventEmitter: EventEmitter2, prismaRepository: PrismaRepository, cache: CacheService, chatwootCache: CacheService);
    client: any;
    stateConnection: wa.StateConnection;
    phoneNumber: string;
    mobile: boolean;
    get connectionStatus(): wa.StateConnection;
    closeClient(): Promise<void>;
    get qrCode(): wa.QrCode;
    logoutInstance(): Promise<void>;
    setInstance(instance: InstanceDto): void;
    profilePicture(number: string): Promise<{
        wuid: string;
        profilePictureUrl: any;
    }>;
    getProfileName(): Promise<any>;
    profilePictureUrl(): Promise<any>;
    getProfileStatus(): Promise<any>;
    connectToWhatsapp(data?: any): Promise<any>;
    protected eventHandler(received: any): Promise<void>;
    private updateContact;
    protected sendMessageWithTyping(number: string, message: any, options?: Options, file?: any, isIntegration?: boolean): Promise<any>;
    textMessage(data: SendTextDto, isIntegration?: boolean): Promise<any>;
    protected prepareMediaMessage(mediaMessage: MediaMessage): Promise<any>;
    mediaMessage(data: SendMediaDto, file?: any, isIntegration?: boolean): Promise<any>;
    processAudio(audio: string, number: string, file: any): Promise<any>;
    audioWhatsapp(data: SendAudioDto, file?: any, isIntegration?: boolean): Promise<any>;
    buttonMessage(data: SendButtonsDto, isIntegration?: boolean): Promise<any>;
    locationMessage(): Promise<void>;
    listMessage(): Promise<void>;
    templateMessage(): Promise<void>;
    contactMessage(): Promise<void>;
    reactionMessage(): Promise<void>;
    getBase64FromMediaMessage(): Promise<void>;
    deleteMessage(): Promise<void>;
    mediaSticker(): Promise<void>;
    pollMessage(): Promise<void>;
    statusMessage(): Promise<void>;
    reloadConnection(): Promise<void>;
    whatsappNumber(): Promise<void>;
    markMessageAsRead(): Promise<void>;
    archiveChat(): Promise<void>;
    markChatUnread(): Promise<void>;
    fetchProfile(): Promise<void>;
    offerCall(): Promise<void>;
    sendPresence(): Promise<void>;
    setPresence(): Promise<void>;
    fetchPrivacySettings(): Promise<void>;
    updatePrivacySettings(): Promise<void>;
    fetchBusinessProfile(): Promise<void>;
    updateProfileName(): Promise<void>;
    updateProfileStatus(): Promise<void>;
    updateProfilePicture(): Promise<void>;
    removeProfilePicture(): Promise<void>;
    blockUser(): Promise<void>;
    updateMessage(): Promise<void>;
    createGroup(): Promise<void>;
    updateGroupPicture(): Promise<void>;
    updateGroupSubject(): Promise<void>;
    updateGroupDescription(): Promise<void>;
    findGroup(): Promise<void>;
    fetchAllGroups(): Promise<void>;
    inviteCode(): Promise<void>;
    inviteInfo(): Promise<void>;
    sendInvite(): Promise<void>;
    acceptInviteCode(): Promise<void>;
    revokeInviteCode(): Promise<void>;
    findParticipants(): Promise<void>;
    updateGParticipant(): Promise<void>;
    updateGSetting(): Promise<void>;
    toggleEphemeral(): Promise<void>;
    leaveGroup(): Promise<void>;
    fetchLabels(): Promise<void>;
    handleLabel(): Promise<void>;
    receiveMobileCode(): Promise<void>;
    fakeCall(): Promise<void>;
}
