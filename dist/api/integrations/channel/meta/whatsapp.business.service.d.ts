import { NumberBusiness } from '@api/dto/chat.dto';
import { MediaMessage, Options, SendAudioDto, SendButtonsDto, SendContactDto, SendListDto, SendLocationDto, SendMediaDto, SendReactionDto, SendTemplateDto, SendTextDto } from '@api/dto/sendMessage.dto';
import { ProviderFiles } from '@api/provider/sessions';
import { PrismaRepository } from '@api/repository/repository.service';
import { CacheService } from '@api/services/cache.service';
import { ChannelStartupService } from '@api/services/channel.service';
import { wa } from '@api/types/wa.types';
import { ConfigService, Database } from '@config/env.config';
import EventEmitter2 from 'eventemitter2';
export declare class BusinessStartupService extends ChannelStartupService {
    readonly configService: ConfigService;
    readonly eventEmitter: EventEmitter2;
    readonly prismaRepository: PrismaRepository;
    readonly cache: CacheService;
    readonly chatwootCache: CacheService;
    readonly baileysCache: CacheService;
    private readonly providerFiles;
    constructor(configService: ConfigService, eventEmitter: EventEmitter2, prismaRepository: PrismaRepository, cache: CacheService, chatwootCache: CacheService, baileysCache: CacheService, providerFiles: ProviderFiles);
    stateConnection: wa.StateConnection;
    phoneNumber: string;
    mobile: boolean;
    get connectionStatus(): wa.StateConnection;
    closeClient(): Promise<void>;
    get qrCode(): wa.QrCode;
    logoutInstance(): Promise<void>;
    private isMediaMessage;
    private post;
    profilePicture(number: string): Promise<{
        wuid: string;
        profilePictureUrl: any;
    }>;
    getProfileName(): Promise<any>;
    profilePictureUrl(): Promise<any>;
    getProfileStatus(): Promise<any>;
    setWhatsappBusinessProfile(data: NumberBusiness): Promise<any>;
    connectToWhatsapp(data?: any): Promise<any>;
    private downloadMediaMessage;
    private messageMediaJson;
    private messageAudioJson;
    private messageInteractiveJson;
    private messageButtonJson;
    private messageReactionJson;
    private messageTextJson;
    private messageLocationJson;
    private messageContactsJson;
    private renderMessageType;
    protected messageHandle(received: any, database: Database, settings: any): Promise<void>;
    private convertMessageToRaw;
    protected eventHandler(content: any): Promise<void>;
    protected sendMessageWithTyping(number: string, message: any, options?: Options, isIntegration?: boolean): Promise<any>;
    textMessage(data: SendTextDto, isIntegration?: boolean): Promise<any>;
    private getIdMedia;
    protected prepareMediaMessage(mediaMessage: MediaMessage): Promise<any>;
    mediaMessage(data: SendMediaDto, file?: any, isIntegration?: boolean): Promise<any>;
    processAudio(audio: string, number: string, file: any): Promise<any>;
    audioWhatsapp(data: SendAudioDto, file?: any, isIntegration?: boolean): Promise<any>;
    buttonMessage(data: SendButtonsDto): Promise<any>;
    locationMessage(data: SendLocationDto): Promise<any>;
    listMessage(data: SendListDto): Promise<any>;
    templateMessage(data: SendTemplateDto, isIntegration?: boolean): Promise<any>;
    contactMessage(data: SendContactDto): Promise<any>;
    reactionMessage(data: SendReactionDto): Promise<any>;
    getBase64FromMediaMessage(data: any): Promise<{
        mediaType: any;
        fileName: any;
        caption: any;
        size: {
            fileLength: any;
            height: any;
            width: any;
        };
        mimetype: any;
        base64: any;
    }>;
    deleteMessage(): Promise<void>;
    mediaSticker(): Promise<void>;
    pollMessage(): Promise<void>;
    statusMessage(): Promise<void>;
    reloadConnection(): Promise<void>;
    whatsappNumber(): Promise<void>;
    markMessageAsRead(): Promise<void>;
    archiveChat(): Promise<void>;
    markChatUnread(): Promise<void>;
    fetchProfile(): Promise<void>;
    offerCall(): Promise<void>;
    sendPresence(): Promise<void>;
    setPresence(): Promise<void>;
    fetchPrivacySettings(): Promise<void>;
    updatePrivacySettings(): Promise<void>;
    fetchBusinessProfile(): Promise<void>;
    updateProfileName(): Promise<void>;
    updateProfileStatus(): Promise<void>;
    updateProfilePicture(): Promise<void>;
    removeProfilePicture(): Promise<void>;
    blockUser(): Promise<void>;
    updateMessage(): Promise<void>;
    createGroup(): Promise<void>;
    updateGroupPicture(): Promise<void>;
    updateGroupSubject(): Promise<void>;
    updateGroupDescription(): Promise<void>;
    findGroup(): Promise<void>;
    fetchAllGroups(): Promise<void>;
    inviteCode(): Promise<void>;
    inviteInfo(): Promise<void>;
    sendInvite(): Promise<void>;
    acceptInviteCode(): Promise<void>;
    revokeInviteCode(): Promise<void>;
    findParticipants(): Promise<void>;
    updateGParticipant(): Promise<void>;
    updateGSetting(): Promise<void>;
    toggleEphemeral(): Promise<void>;
    leaveGroup(): Promise<void>;
    fetchLabels(): Promise<void>;
    handleLabel(): Promise<void>;
    receiveMobileCode(): Promise<void>;
    fakeCall(): Promise<void>;
}
