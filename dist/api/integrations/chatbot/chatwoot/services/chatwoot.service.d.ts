import { InstanceDto } from '@api/dto/instance.dto';
import { Options } from '@api/dto/sendMessage.dto';
import { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';
import { PrismaRepository } from '@api/repository/repository.service';
import { CacheService } from '@api/services/cache.service';
import { WAMonitoringService } from '@api/services/monitor.service';
import { ConfigService } from '@config/env.config';
import { ChatwootAPIConfig, contact, conversation, generic_id, inbox } from '@figuro/chatwoot-sdk';
import { Contact as ContactModel, Message as MessageModel } from '@prisma/client';
import { Readable } from 'stream';
export declare class ChatwootService {
    private readonly waMonitor;
    private readonly configService;
    private readonly prismaRepository;
    private readonly cache;
    private readonly logger;
    private provider;
    constructor(waMonitor: WAMonitoringService, configService: ConfigService, prismaRepository: PrismaRepository, cache: CacheService);
    private pgClient;
    private getProvider;
    private clientCw;
    getClientCwConfig(): ChatwootAPIConfig & {
        nameInbox: string;
        mergeBrazilContacts: boolean;
    };
    getCache(): CacheService;
    create(instance: InstanceDto, data: ChatwootDto): Promise<ChatwootDto>;
    find(instance: InstanceDto): Promise<ChatwootDto>;
    getContact(instance: InstanceDto, id: number): Promise<import("@figuro/chatwoot-sdk").contactable_inboxes>;
    initInstanceChatwoot(instance: InstanceDto, inboxName: string, webhookUrl: string, qrcode: boolean, number: string, organization?: string, logo?: string): Promise<boolean>;
    createContact(instance: InstanceDto, phoneNumber: string, inboxId: number, isGroup: boolean, name?: string, avatar_url?: string, jid?: string): Promise<import("@figuro/chatwoot-sdk").extended_contact>;
    updateContact(instance: InstanceDto, id: number, data: any): Promise<void>;
    addLabelToContact(nameInbox: string, contactId: number): Promise<boolean>;
    findContact(instance: InstanceDto, phoneNumber: string): Promise<any>;
    private mergeContacts;
    private mergeBrazilianContacts;
    private findContactInContactList;
    private getNumbers;
    private getSearchableFields;
    private getFilterPayload;
    createConversation(instance: InstanceDto, body: any): Promise<any>;
    getInbox(instance: InstanceDto): Promise<inbox | null>;
    createMessage(instance: InstanceDto, conversationId: number, content: string, messageType: 'incoming' | 'outgoing' | undefined, privateMessage?: boolean, attachments?: {
        content: unknown;
        encoding: string;
        filename: string;
    }[], messageBody?: any, sourceId?: string, quotedMsg?: MessageModel): Promise<generic_id & import("@figuro/chatwoot-sdk").message>;
    getOpenConversationByContact(instance: InstanceDto, inbox: inbox, contact: generic_id & contact): Promise<conversation>;
    createBotMessage(instance: InstanceDto, content: string, messageType: 'incoming' | 'outgoing' | undefined, attachments?: {
        content: unknown;
        encoding: string;
        filename: string;
    }[]): Promise<generic_id & import("@figuro/chatwoot-sdk").message>;
    private sendData;
    createBotQr(instance: InstanceDto, content: string, messageType: 'incoming' | 'outgoing' | undefined, fileStream?: Readable, fileName?: string): Promise<any>;
    sendAttachment(waInstance: any, number: string, media: any, caption?: string, options?: Options): Promise<any>;
    onSendMessageError(instance: InstanceDto, conversation: number, error?: any): Promise<void>;
    receiveWebhook(instance: InstanceDto, body: any): Promise<{
        message: string;
    }>;
    private updateChatwootMessageId;
    private getMessageByKeyId;
    private getReplyToIds;
    private getQuotedMessage;
    private isMediaMessage;
    private getAdsMessage;
    private getReactionMessage;
    private getTypeMessage;
    private getMessageContent;
    getConversationMessage(msg: any): any;
    eventWhatsapp(event: string, instance: InstanceDto, body: any): Promise<any>;
    getNumberFromRemoteJid(remoteJid: string): string;
    startImportHistoryMessages(instance: InstanceDto): void;
    isImportHistoryAvailable(): boolean;
    addHistoryMessages(instance: InstanceDto, messagesRaw: MessageModel[]): void;
    addHistoryContacts(instance: InstanceDto, contactsRaw: ContactModel[]): void;
    importHistoryMessages(instance: InstanceDto): Promise<number>;
    updateContactAvatarInRecentConversations(instance: InstanceDto, limitContacts?: number): Promise<any>;
    syncLostMessages(instance: InstanceDto, chatwootConfig: ChatwootDto, prepareMessage: (message: any) => any): Promise<void>;
}
